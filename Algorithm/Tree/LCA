const int MAX_N = 40000;
const int MAX = numeric_limits<int>::max();

int no2serial[MAX_N], serial2no[MAX_N];
vector<pair<int, int> > edge[MAX_N];

int locInTrip[MAX_N], depth[MAX_N];

int nextSerial;

struct RMQ{
  int n;
  vector<int> rangeMin;
  RMQ(const vector<int> & array) {
      n = array.size();
      rangeMin.resize(n*4);
      init(array, 0, n-1, 1);
  }
  
  int init(const vector<int>& array, int left, int right, int node) {
      if(left == right) return rangeMin[node] = array[left];
      int mid = (left + right) / 2;
      int leftMin = init(array, left, mid, node*2);
      int rightMin = init(array, mid + 1, right, node*2 + 1);
      return rangeMin[node] = min(leftMin, rightMin);
  }
  
  int query(int left, int right, int node, int nodeLeft, int nodeRight) {
      if(right < nodeLeft || nodeRight < left) return MAX;
      if(left <= nodeLeft && nodeRight <= right) return rangeMin[node];
      int mid = (nodeLeft + nodeRight) / 2;
      return min(query(left, right, node*2, nodeLeft, mid), query(left, right, node*2+1, mid + 1, nodeRight));
  }
  
  int query(int left, int right) {
      return query(left, right, 1, 0, n-1);
  }
};

void traverse(int here, int d, vector<int>& trip) {
    //serial번호 할당 
    no2serial[here] = nextSerial;
    serial2no[nextSerial] = here;
    ++nextSerial;
    
    //깊이 갱신 
    depth[here] = d;
    
    //Trip에 현재 노드의 일련번호 추가 
    locInTrip[here] = trip.size();
    trip.push_back(no2serial[here]);
    
    for(auto e : edge[here]) {
        int there = e.first;
        int dist = e.second;
        
        if(depth[there]  != -1) continue;
        traverse(there, d + dist, trip);
        trip.push_back(no2serial[here]);
    }
}

RMQ* prepareRMQ() {
    nextSerial = 0;
    vector<int> trip;
    traverse(0, 0, trip);
    return new RMQ(trip);
}

int distance(RMQ* rmq, int u, int v) {
    
    int lu = locInTrip[u], lv = locInTrip[v];
    if(lu > lv) swap(lu, lv);
    
    int lca = serial2no[rmq->query(lu, lv)];
    return depth[u] + depth[v] - 2 * depth[lca];
}
