/*
boj 13977 Binomial Coefficients and Queries
Algorithm: Divide & Conquer, Fermat's Little Theorem
Time_Complexity: O(MlogN)
Explain: 

1) MAX까지 팩토리얼을 모두 구해놓음
2) A! / (B! * C!) => A! * (B! * C!)^(M - 2) by FLT

유의 사항 B와 C를 각각 바꿔서 곱하면 시간이 오래 걸린다. 
왜냐면 logN을 한 번 더 하기 때문에 비효율적

1차 실험)
Parity Bit 검출 시 
if(n%2 == 1) 도 있지만
if(n & 1) 도 있다

더 빨라지진 않는다

2차
또, 
power(x, n/2)도 있지만, power(x^2, n/2) 도 있다 
*/

#include <bits/stdc++.h>
#define endl "\n"
#define ll long long

using namespace std;
const int MAX = 4000001;
const int Mod = 1000000007;

ll fac[MAX];

ll power(int x, int n) {
    if(n == 0) return 1;
    else if(n == 1) return x;
    
    if(n & 1) {
        return (x * power(x, n - 1)) % Mod;
    } else {
        ll half = power(x, n/2);
        return (half * half) % Mod;
    }
    return -1;
}



int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    fac[0] = fac[1] = 1;
    for(int i = 2; i < MAX; i++) {
        fac[i] = (fac[i-1] * i) % Mod;
    }
    
    int M; cin >> M;
    int N, K;
    for(int i = 0; i < M; i++) {
        cin >> N >> K;
        
        ll up = fac[N];
        ll down = (fac[N - K] * fac[K]) % Mod;
        down = power(down, Mod - 2);
        
        cout << (up * down) % Mod << "\n";
    }
}
