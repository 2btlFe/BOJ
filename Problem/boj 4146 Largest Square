/*
boj 4146 Largest Square
Algorithm: parametric search, prefix_sum
TC: O(n^2 log(n))
SC: O(n^2)
Explaination:

1) 2차원 prefix sum
//pre[0][0] = 0 을 만들기 위해 pre[i+1][j+1]을 쓴 것이다
정의: pre[i][j] = pre[i-1][j] + pre[i][j-1] - pre[i-1][j-1] + add;
사용: sum = pre[i][j] - pre[i-mid][j] - pre[i][j-mid] + pre[i-mid][j-mid];

2) parametric search
int l, r, ret
while(l <= r) {
    int mid = (l + r) / 2;
    
    if(true) {
        ret = mid
        //큰 거 구하면 l = mid + 1
        //작은 거 구하면 r = mid - 1
    } else {
        //큰 거 구하면 r= mid - 1
        //작은 거 구하면 l = mid + 1
    }
    
}
*/

#include <bits/stdc++.h>
#define ll long long
#define endl "\n"
#define all(x) x.begin(), x.end()

using namespace std;

bool check(int mid, const vector<vector<int> > & v, int l) {
    int n = v.size() - 1;
    vector<vector<int> > pre(n+1,vector<int>(n+1));
    for(int i = 1; i < n+1; i++) {
        for(int j = 1; j < n+1; j++) {
            int add = (v[i][j] == 1) ? 1 : 0;
            pre[i][j] = pre[i-1][j] + pre[i][j-1] - pre[i-1][j-1] + add;
        }    
    }
    
    for(int i = mid; i < n+1; i++) {
        for(int j = mid; j < n+1; j++) {
            int sum = pre[i][j] - pre[i-mid][j] - pre[i][j-mid] + pre[i-mid][j-mid];
            if(sum <= l) return true;
        }
    }
    return false;    
}

void solve() {
    int n, w, L; cin >> n >> w >> L;
    vector<vector<int> > v(n+1, vector<int>(n+1));
    while(w--) {
        int x, y; cin >> x >> y;
        v[x][y] = 1;
    }
    
    int l = 0, r = n, ret;
    while(l <= r) {
        int mid = (l + r) / 2;
        if(check(mid, v, L)) {
            ret = mid;
            l = mid + 1;
        } else {
            r = mid - 1;
        }
    }
    ret = ret*ret;
    cout << ret << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    
    
    int tt; cin >> tt;
    while(tt--) {
        solve();
    }
}
