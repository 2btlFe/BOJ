/*
boj 10747 Censoring
Algorithm: KMP
Time_Complexity: O(m + n)
Explaination: 

matched(j)를 이전에 있던 값의 matched로 
바꿔줘야 한다 -> 고로 stack을 이용해 
쌓아간다 
*/

#include <bits/stdc++.h>
#define all(x) x.begin(), x.end()
using namespace std;

//O(H)
vector<int> getPartialMatch(const string& N) {
    int m = N.size();
    vector<int> pi(m, 0);
    int begin = 1, matched = 0;
    while(begin + matched < m) {
        if(N[begin + matched] == N[matched]) {
            matched++;
            pi[begin + matched - 1] = matched;
        } else {
            if(matched == 0) begin++;
            else {
                begin += matched - pi[matched - 1];
                matched = pi[matched - 1];
            }
        }
    }
    return pi;
}

//O(N)
string kmpSearch(const string& H, const string& N) {
    int n = H.size(), m = N.size();
    vector<int> ret;
    vector<int> pi = getPartialMatch(N);
    
    stack<pair<char, int> > s;
    for(int next = 0; next < n; next++) {
        int matched = s.empty() ? 0 : s.top().second;
        while(true) {
            if(H[next] == N[matched]) {
                matched++;
                s.push({H[next], matched});
                if(matched == m) {
                    while(matched--) {
                        s.pop();
                    }
                }
                break;
            } else {
                if(matched == pi[matched - 1]) {
                    s.push({H[next], 0});
                    break;
                }
                matched = pi[matched - 1];
            }
        }
    }
    
    string ans;
    while(!s.empty()) {
        ans += s.top().first;
        s.pop();
    }
    reverse(all(ans));
    return ans;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    string H, N;
    cin >> H >> N;
    
    cout << kmpSearch(H, N);
}
