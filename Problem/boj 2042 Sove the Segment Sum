/*
boj2042 구간 합 구하기 
algorithm: Segment Tree
time complexity: O((M+K)logN)
Explaination: 

구간 합을 구하는 문제였고
기존 RMQ의 min함수를 +로 바꾸면 되는 문제였다
까다로운 점은 update가 있다는 점이었지만,
업데이트의 경우, 값을 바꾸는 것이 아닌 diff를 넘겨주어 
구간 합을 쉽게 바꿔나갈 수 있었다 

하지만, 아무래도 펜윅 트리가 더 좋을 것 같긴하다

펜윅트리는 아직 공부 안 했으니 
공부하고 한 번 더 풀어보려 한다  
*/

#include <bits/stdc++.h>
#define ll long long int
using namespace std;

struct Tree {
    //배열의 길이
    int n;
    //각 구간의 최소치
    vector<ll> sum;
    
    Tree(const vector<ll>& array) {
        n = array.size();
        sum.resize(n*4);   //4n정도면 됨
        init(array, 0, n-1, 1);        
    }
    
    ll init(const vector<ll>& array, int left, int right, int node) {
        if(left == right) return sum[node] = array[left];
        int mid = (left + right) / 2;
        ll leftSum = init(array, left, mid, node*2);
        ll rightSum = init(array, mid + 1, right, node*2 + 1);
        return sum[node] = leftSum + rightSum;
    }
    
    //O(lgn)
    ll query(int left, int right, int node, int nodeLeft, int nodeRight) {
        //겹치지 않는다면, 0을 반환
        if(right < nodeLeft || nodeRight < left) return 0;
        //포함된다면, node의  sum을 반환
        if(left <= nodeLeft && nodeRight <= right) return sum[node];
        //교집합이 생성됐다면, 두 범위의 합을 반환 
        int mid = (nodeLeft + nodeRight) / 2;
        return  query(left, right, node*2, nodeLeft, mid) + query(left, right, node*2 + 1, mid+1, nodeRight);
    }
    
    void update(int node, int nodeLeft, int nodeRight, int index, ll diff) {
        //범위에 들어가지 않으면 그냥 멈추기 
        if(index < nodeLeft || index > nodeRight) return;
        
        sum[node] = sum[node] + diff;
        //leaf 노드가 아니라면, 
        if(nodeLeft != nodeRight) {
            int mid = (nodeLeft + nodeRight) / 2;
            update(node*2, nodeLeft, mid, index, diff);
            update(node*2+1, mid+1, nodeRight, index, diff);
        }
    }
};    

int main() {
   ios_base::sync_with_stdio(false);
   cin.tie(NULL);
   cout.tie(NULL);
   
   int N, M, K; 
   cin >> N >> M >> K;
   
   vector<ll> v;
   for(int i = 0; i < N; i++) {
       ll x; cin >> x;
       v.push_back(x);
   }
   
   M += K;
   Tree ret = Tree(v);
   while(M--) {
       int a, b;
       cin >> a >> b;
       
       if(a == 1) { 
           ll c; cin >> c;
           ret.update(1, 0, N-1, b-1, c - v[b-1]);
           v[b-1] = c;
       } else {
           int c; cin >> c;
           cout << ret.query(b-1, c-1, 1, 0, N-1) << "\n";
       }
   }
}
