/*
boj2143 sum of two array
Algorithm: Prefix_sum, Binary Search
Time Complexity: O(n^2)
Explaination: 

부분합을 모두 모은 뒤,
정렬 후에 이분 탐색으로 가능한 경우를 찾는다

여러 개수를 찾아야 하는 경우,
upper_bound - lower_bound를 한다
*/
#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
#define len(x) (int) (x).size()
#define all(x) x.begin(), (x).end()
#define endl "\n"

int main()
{
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);
  std::ios_base::sync_with_stdio(false);

  vector<ll> sumA, sumB;
  
  int t, n, m;
  cin >> t;
  cin >> n;
  ll psumA[n + 1];
  psumA[0] = 0;
  for(int i = 1; i <= n; i++) {
    int x; cin >> x;
    psumA[i] = psumA[i-1] + x;
  }
  for(int i = 1; i <= n; i++) {
    for(int j = 0; j < i; j++) {
      sumA.push_back(psumA[i] - psumA[j]);
    }
  }
  cin >> m;
  ll psumB[m+1];
  psumB[0] = 0;
  for(int i = 1; i <= m; i++) {
    int x; cin >> x;
    psumB[i] = psumB[i-1] + x;
  }
  for(int i = 1; i <= m; i++) {
    for(int j = 0; j < i; j++) {
      sumB.push_back(psumB[i] - psumB[j]);
    }
  }

  sort(all(sumB));
  ll ret = 0;
  for(int item : sumA) {
    ll target = t - item;
    ret += upper_bound(all(sumB), target) - lower_bound(all(sumB), target);
  }
  cout << ret;
}
















