#include <bits/stdc++.h>
#define endl "\n"
#define ll long long
using namespace std;

int N, K;
const int MAX_N = 100001;
const int INF = 987654321;
const int lg = 21;
vector<pair<int, int> > adj[MAX_N];
int depth[MAX_N];
int parent[MAX_N][lg+1];
int qmin[MAX_N][lg+1];
int qmax[MAX_N][lg+1];

void dfs(int here) {
    for(auto p : adj[here]) {
        int there = p.first;
        int dist = p.second;
        if(depth[there] != -1) continue;
        depth[there] = depth[here] + 1;
        qmin[there][0] = dist;
        qmax[there][0] = dist;
        parent[there][0] = here;
        dfs(there);
    }
}

void parentCal() {
    for(int j = 1; j < lg; j++) {
        for(int i = 1; i <= N; i++) {
            parent[i][j] = parent[parent[i][j-1]][j-1];    
            qmin[i][j] = min(qmin[i][j-1], qmin[parent[i][j-1]][j-1]);
            qmax[i][j] = max(qmax[i][j-1], qmax[parent[i][j-1]][j-1]);
        }
    }
}

pair<int, int > lca(int u, int v) {
    int rmin = INF;
    int rmax = -INF;
    
    if(depth[u] < depth[v]) swap(u, v);
    for(int i = lg; i >= 0; i--) {
        if(depth[parent[u][i]] >= depth[v]) {
            rmin = min(rmin, qmin[u][i]);
            rmax = max(rmax, qmax[u][i]);
            u = parent[u][i];
        }
    }
    
    if(u != v) {
        for(int i = lg; i >= 0; i--) {
            if(parent[u][i] != parent[v][i]) {
                rmin = min({rmin, qmin[u][i], qmin[v][i]});
                rmax = max({rmax, qmax[u][i], qmax[u][i]});
                u = parent[u][i];
                v = parent[v][i];
            }    
        }
        //한 단계만 더 올라가면 lca다.
        rmin = min({rmin, qmin[u][0], qmin[v][0]});
        rmax = max({rmax, qmax[u][0], qmax[v][0]});
    }
    return {rmin, rmax};
}

int main() {
    memset(depth, -1, sizeof(depth));
    cin >> N;
    
    for(int i = 0; i < N; i++) {
        int a, b, c;
        cin >> a >> b >> c;
        adj[a].push_back({b, c});
        adj[b].push_back({a, c});
    }
    
    
    depth[1] = 0;
    dfs(1);
    parentCal();
    
    cin >> K;
    while(K--) {
        int d, e;
        cin >> d >> e;
        auto ret = lca(d, e);
        cout << ret.first << " " << ret.second << endl;
    }
}    
    
    
    
    
