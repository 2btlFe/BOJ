/*
boj2213 Independent Set Of Tree
Algorithm: DP - Tree
Time Complexity: O(V)

Explanation:
트리에서의 다이나믹 프로그래밍으로,
이전이 선택이면 -> 다음 (선택, 선택X) 중 작은 것을 더해주면 되고
이전이 선택X면 -> 다음 (선택O)을 모두 더해주면 된다

또한, Trace도 똑같은 양식으로 해주면 된다 
*/
#include<bits/stdc++.h>

using namespace std;
typedef long long ll;
int cache[10001][2];
int cost[10001];
vector<int> v[10001];

int iSet(int now, int from, int state) {
  //memoization
  int& ret = cache[now][state];
  if(ret != -1) return ret;

  //recursion
  ret = 0;
  if(state) {
    for(int to : v[now]) {
      if(to == from) continue;
      ret += iSet(to, now, 0);
    }
    ret += cost[now];
  }
  else {
    for(int to : v[now]) {
      if(to == from) continue;
      int ret1 = iSet(to, now, 1);
      int ret2 = iSet(to, now, 0);
      ret += max(ret1, ret2);
    }
  }
  return ret;
}

set<int> s;
void reconstruct(int now, int from, int state) {
  if(state == 1) {
    s.insert(now);
    for(int to : v[now]) {
      if(to == from) continue;
      reconstruct(to, now, 0);
    }
  }
  else {
    for(int to : v[now]) {
      if(to == from) continue;
      if(iSet(to,now,1) > iSet(to,now,0)) {
        reconstruct(to, now, 1);
      }
      else reconstruct(to,now,0);
    }
  }
  return;
}

int main() {
  //앞으로, scanf 쓰면 안됨
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  memset(cache, -1, sizeof(cache));
  //----------------------------------------------
  int n;
  cin >> n;

  for(int i = 1; i <= n; i++) {
    cin >> cost[i];
  }

  for(int i = 0; i < n-1; i++) {
    int a, b;
    cin >> a >> b;
    v[a].push_back(b);
    v[b].push_back(a);
  }
  cout << max(iSet(1,0,0), iSet(1,0,1)) << '\n';
  if(iSet(1,0,0) > iSet(1,0,1)) reconstruct(1,0,0);
  else reconstruct(1,0,1);

  for(int item : s) cout << item << " ";
}
