/*
boj2410 The sum of the powers of two
algorithm: DP - knapsack
time complexity: O(NlogN);

평범한 냅색 문제인데, 내가 잘 못했다
그냥 처음부터 2의 멱수 조합을 만들고
그 조합을 평범한 냅색으로 돌리는 게 좋다

괜히 범위 생각해서 하지 말자
더 헷갈린다

저번처럼 그냥 입력을 vector에 저장해버리는 방식이 보기 좋다
*/
#include<bits/stdc++.h>
using namespace std;
#define all(x) x.begin(), x.end()
typedef long long ll;

const int M = 1000000000;
int N;

int main() {
  std::cin.tie(nullptr);
  std::ios_base::sync_with_stdio(false);  
  
  cin >> N;

  vector<ll> dp(N+1, 0);
  vector<ll> v;
  for(ll i = 1; i <= N; i <<= 1) v.push_back(i); 

  dp[0] = 1;
  for(int i = 0; i < v.size(); i++) {
    for(auto j = v[i]; j <= N; j++) {
      dp[j] = (dp[j] + dp[j - v[i]])%M;
    }
  }

  cout << dp[N];
}
