/*
boj1328
algorithm: DP - counting
time complexity: O(N*L*R)*O(1)

개수를 셀 때 큰 수부터 집어넣으면 
그리디하게 셀 수 있다
또한 범위를 벗어날 수 있으므로, ll로 적용한다
*/

#include<bits/stdc++.h>
using namespace std;
#define all(x) x.begin(), x.end()
typedef long long ll;

int N, L , R;
const int M = 1000000007;
ll cache[101][101][101];

//definition: n,l,r이 주어졌을 때 나올 수 있는 경우의 수 
ll building(int n, int l, int r) {
  //base case
  if(n == 0) return (l == 0) && (r == 0);

  //memoization
  ll&ret = cache[n][l][r];
  if(ret != -1) return ret;

  //recursion
  ret = 0;
  if(N - n - 1 >= 1) ret = (ret + ((N-n-1) * building(n-1, l, r))%M ) %M;
  if(l != 0) ret = (ret + building(n-1, l-1, r))%M;
  if(r != 0) ret = (ret + building(n-1, l, r-1))%M;

  return ret;
}

int main() {
  std::cin.tie(nullptr);
  std::ios_base::sync_with_stdio(false);  
  memset(cache, -1, sizeof(cache));


  cin >> N >> L >> R;

  cout << building(N - 1, L - 1, R - 1);
}
