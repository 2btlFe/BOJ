/*
boj2533 SNS
Algorithm: DP - Tree
Time Complexity: O(V)

Explanation:
트리에서의 다이나믹 프로그래밍으로,
이전이 선택이면 -> 다음 (선택, 선택X) 중 작은 것을 더해주면 되고
이전이 선택X면 -> 다음 (선택O)을 모두 더해주면 된다
*/
#include<bits/stdc++.h>

using namespace std;
typedef long long ll;
int cache[1000001][2];
vector<int> v[1000001];

//Definition: n번째를 early adopter로 받아들이거나 받아들이지 않는 2가지 경우 중에 얻을 수 있는 early adopter의 최소 개수
int eAdopter(int n, int from, int state)
{ 
  //base case

  //memoization
  int& ret = cache[n][state];
  if(ret != -1) return ret;

  //recursion
  ret = 0;
  if(state == 0) {  //선택 X
    for(int to : v[n]) {
      if(to == from) continue;
      ret += eAdopter(to, n, 1);
    }
  }
  else {            //선택 O
    for(int to : v[n]) {
      int ret1, ret2;
      if(to == from) continue;
      ret1 = eAdopter(to, n, 0);
      ret2 = eAdopter(to, n, 1);
      ret += min(ret1, ret2);
    }
    ret += 1;
  }
  return ret = min(ret, ret);
}

int main() {
  //앞으로, scanf 쓰면 안됨
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  memset(cache, -1, sizeof(cache));
  //----------------------------------------------
  int N;
  cin >> N;
  for(int i = 0; i < N-1; i++) {
    int a, b;
    cin >> a >> b;
    v[a].push_back(b);
    v[b].push_back(a);
  }

  cout << min(eAdopter(1, 0, 1), eAdopter(1, 0, 0));

}
