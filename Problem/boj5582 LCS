/*
boj5582 LCS
algorithm: DP - LCS
time complexity: O(N*N)*O(1)*O(N^2);

사실 그냥 같으면 메모이제이션만 하면 된다
*/

#include<bits/stdc++.h>
using namespace std;
#define all(x) x.begin(), x.end()
typedef long long ll;

int cache[4001][4001];
string A, B;

//Definition: 각각 a, b에서 시작하는 LCS를 구한다 
int lcs(int a, int b) {
  //base case : 둘 중 하나라도 범위를 벗어날 경우
  if(a >= A.size() || b >= B.size()) return 0;

  //memoization
  int& ret = cache[a][b];
  if(ret != -1) return ret;

  //recursion
  ret = 0;
  if(A[a] == B[b]) {
     ret = 1 + lcs(a+1, b+1);
  }

  return ret;
}

int main() {
  std::cin.tie(nullptr);
  std::ios_base::sync_with_stdio(false);  
  memset(cache, -1, sizeof(cache));

  cin >> A >> B;

  int ret  = 0;
  for(int i = 0; i < A.size(); i++) {
    for(int j = 0; j < B.size(); j++) {
      ret = max(ret, lcs(i,j));
    }
  }

  cout << ret;
}
