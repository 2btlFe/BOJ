#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define ld long double
#define ar array
#define endl "\n"

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

template <typename T>
using oset =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define vt vector
#define pb push_back
#define pi pair<int, int> > ;
#define pl pair<ll, ll> > ;
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

#define F_OR(i, a, b, s)                                                       \
  for (int i = (a); (s) > 0 ? i < (b) : i > (b); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1)
#define FOR(...) F_ORC(__VA_ARGS__)(__VA_ARGS__)
#define EACH(x, a) for (auto &x : a)

ll FIRSTTRUE(function<bool(ll)> f, ll lb, ll rb) {
  while (lb < rb) {
    ll mb = (lb + rb) / 2;
    f(mb) ? rb = mb : lb = mb + 1;
  }
  return lb;
}
ll LASTTRUE(function<bool(ll)> f, ll lb, ll rb) {
  while (lb < rb) {
    ll mb = (lb + rb + 1) / 2;
    f(mb) ? lb = mb : rb = mb - 1;
  }
  return lb;
}

/*read*/
template <class A> void read(vt<A> &v);
template <class A, size_t S> void read(ar<A, S> &a);
template <class T> void read(T &x) { cin >> x; }
void read(double &d) {
  string t;
  read(t);
  d = stod(t);
}
void read(long double &d) {
  string t;
  read(t);
  d = stold(t);
}
template <class H, class... T> void read(H &h, T &...t) {
  read(h);
  read(t...);
}
template <class A> void read(vt<A> &x) {
  EACH(a, x)
  read(a);
}

/*to_string*/
string to_string(char c) { return string(1, c); }
string to_string(bool b) { return b ? "true" : "false"; }
string to_string(const char *s) { return string(s); }
string to_string(string s) { return s; }
string to_string(vt<bool> v) {
  string res;
  FOR(sz(v))
  res += char('0' + v[i]);
  return res;
}

template <size_t S> string to_string(bitset<S> b) {
  string res;
  FOR(S)
  res += char('0' + b[i]);
  return res;
}
template <class T> string to_string(T v) {
  bool f = 1;
  string res;
  EACH(x, v) {
    if (!f)
      res += ' ';
    f = 0;
    res += to_string(x);
  }
  return res;
}

/*write*/
template <class A> void write(A x) { cout << to_string(x); }
template <class H, class... T> void write(const H &h, const T &...t) {
  write(h);
  write(t...);
}
void print() { write("\n"); }
template <class H, class... T> void print(const H &h, const T &...t) {
  write(h);
  if (sizeof...(t))
    write(' ');
  print(t...);
}

void DBG() { cerr << "]" << endl; }
template <class H, class... T> void DBG(H h, T... t) {
  cerr << to_string(h);
  if (sizeof...(t))
    cerr << ", ";
  DBG(t...);
}
#ifdef _DEBUG
#define dbg(...)                                                               \
  cerr << "LINE(" << __LINE__ << ") -> [" << #__VA_ARGS__ << "]: [",           \
      DBG(__VA_ARGS__)
#else
#define dbg(...) 0
#endif

template <class T> void offset(ll o, T &x) { x += o; }
template <class T> void offset(ll o, vt<T> &x) {
  EACH(a, x)
  offset(o, a);
}
template <class T, size_t S> void offset(ll o, ar<T, S> &x) {
  EACH(a, x)
  offset(o, a);
}

mt19937 mt_rng(chrono::steady_clock::now().time_since_epoch().count());
ll randint(ll a, ll b) { return uniform_int_distribution<ll>(a, b)(mt_rng); }

template <class T, class U> void vti(vt<T> &v, U x, size_t n) {
  v = vt<T>(n, x);
}
template <class T, class U> void vti(vt<T> &v, U x, size_t n, size_t m...) {
  v = vt<T>(n);
  EACH(a, v)
  vti(a, x, m);
}

const int d4[4][2] = {{0, -1}, {0, 1}, {1, 0}, {-1, 0}};
const int d8[8][2] = {{0, -1},  {0, 1},  {1, 0},  {-1, 0},
                      {-1, -1}, {-1, 1}, {1, -1}, {1, 1}};

int N, M;

//그래프의 인접 리스트 표현
vector<vector<int> > adj;
//각 정점의 컴포넌트 번호
vector<int> sccId;
//각 정점의 발견 순서
vector<int> discovered;
//정점의 번호를 담는 스택
stack<int> st;
int sccCounter, vertexCounter;
//here를 루트로 하는 서브트리에서 역방향 간선이나 교차 간선을
//통해 갈 수 있는 정점 중 최소 발견 순서를 반환한다.
//(이미 SCC로 묶인 정점으로 연결된 교차 간선은 무시한다)
int scc(int here) {
  int ret = discovered[here] = vertexCounter++;
  //스택에 here를 넣는다. here의 후손들은 모두 스택에서 here 후에 들어간다.
  st.push(here);
  for(int there : adj[here]) {
    if(discovered[there] == -1) 
      ret = min(ret, scc(there));
    //there가 무시해야 하는 교차 간선이 아니라면
    else if(sccId[there] == -1)
      ret = min(ret, discovered[there]);
  }
  //here에서 부모로 올라가는 간선을 끊어야 할지 확인한다
  if(ret == discovered[here]) {
    //here를 루트로 하는 서브트리에 남아 있는 정점들을 전부 하나의 컴포넌트로 묶는다.
    while(true) {
      int t = st.top();
      st.pop();
      sccId[t] = sccCounter;
      if(t == here) break;
    }
    sccCounter++;
  }
  return ret;
}

vector<int> tarjanSCC() {
  //배열들을 모두 초기화
  sccId = discovered = vector<int>(adj.size(), -1);
  //카운터 초기화
  sccCounter = vertexCounter = 0;
  //모든 정점에 대해 scc()호출 
  for(int i = 0; i < adj.size(); i++) if(discovered[i] == -1) scc(i);
  return sccId;
}

void makeGraph(const vector<pair<int, int> >& clause) {
  adj.clear(); adj.resize(N*2);
  for(auto c : clause) {
    int i, j, ni, nj;
    if(c.first >= 0) {
      i = (c.first-1)*2;
      ni = (c.first-1)*2+1;
    } else {
      i = (c.first+1)*(-2)+1;
      ni = (c.first+1)*(-2);
    }
    if(c.second >= 0) {
      j = (c.second-1)*2;
      nj = (c.second-1)*2+1;
    } else {
      j = (c.second+1)*(-2)+1;
      nj = (c.second+1)*(-2);
    }
    adj[ni].push_back(j);
    adj[nj].push_back(i);
  }
}

vector<int> solve2SAT() {
  int n = adj.size() / 2;
  //하므이 그래프의 정점들을 강결합 요소별로 묶는다
  vector<int> label = tarjanSCC();
  //이 SAT문제를 푸는 것이 불가능한지 확인한다. 한 변수를 나타내는 두 정점이 
  //같은 강결합 요소에 속해 있을 경우 답이 없다
  for(int i = 0; i < 2*n; i += 2) 
    if(label[i] == label[i+1])
      return vector<int>();
  //SAT문제를 푸는 것이 가능하다. 답을 생성하자!
  vector<int> value(2 * n, -1);
  //Tarjan 알고리즘에서 SCC번호는 위상정렬의 역순으로 배정된다
  //SCC 번호의 역순으로 각 정점을 정렬하면 위상정렬 순서가 된다.
  vector<pair<int, int> > order;
  for(int i = 0; i < 2 * n; i+= 2) {
    order.push_back({-label[i], i});
  }
  sort(order.begin(), order.end());
  //각 정점에 값을 배정한다.
  for(int i = 0; i < 2 * n; i++) {
    int vertex = order[i].second;
    int variable = vertex/2, isTrue = vertex%2 == 0;
    if(value[variable] != -1) continue;
    //not A가 A보다 먼저 나왔으면 A는 참
    //A가 not A보다 먼저 나왔으면 A는 거짓
    value[variable] = !isTrue;
  }
  return value;
}

void solve() {
  cin >> N >> M;
  vector<pair<int, int> >clause;
  for(int i = 0; i < M; i++) {
    int xi, xj;
    cin >> xi >> xj;
    clause.push_back({xi, xj});
  }
  makeGraph(clause);
  vector<int> ans = solve2SAT();
  if(ans.empty()) cout << 0 << endl;
  else {
    cout << 1 << endl;
    for(int i = 0; i < N; i++) cout << ans[i] << " ";
  }
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  solve();
}
