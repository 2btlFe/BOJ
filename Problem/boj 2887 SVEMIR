/*
boj 2887 SVEMIR
Time Complexity: O(nlogn)
Explaination:
원래는 (n)*(n) 개의 간선을 대상으로 kruskal을 해야하지만,
O(1e10*log(1e10))이라는 어마어마한 시간복잡도가 나오게 된다.
이를 억제하기 위해 적절한 간선만을 이용하려 한다

바로 x, y, z좌표를 정렬하여 얻은 
바로 양옆 간선만 사용하는 것이다. 
총 3*(n-1)개다.

가장 최적화된 간선만 사용해도 문제의 답을 알 수 있다.

증명
가장 최적화된 간선만 사용해도 문제의 답을 얻을 수 없다고 가정하자
그 예로 간선이 연결된 형태가 2개의 component로 나뉘어진다고 가정하자

그렇기 위해서는 x좌표롤 정렬한 친구들이 정확히 반 갈린 형태로 component를 이룬다고 할 수 있다


하지만, 우리는 모든 연결된 간선을 대상으로 확인하기 때문에

두 컴포넌트의 노드 중 x좌표 차이가 최적화된 간선이 있을 수 밖에 없다
그 간선을 꼭 검사해야하고, 그 결과
두 개의 컴포넌트는 연결이 되어야 한다

모순을 찾아냈으므로

'가장 최적화된 간선만 사용해도 문제의 답을 알 수 있다' 는 명제는 참이다.
*/

#include <bits/stdc++.h>
#define all(x) x.begin(), x.end()
using namespace std;
int parent[100001];

class node {
public:
    int d, u, v;
    
    node(int _d, int _u, int _v) {
        this->d = _d;
        this->u = _u;
        this->v = _v;
    };
    
    bool operator < (node& n1) {
        return this -> d < (n1.d);
    }
};

int getParent(int x) {
    if(parent[x] == x) return x;
    return parent[x] = getParent(parent[x]);
}

void unionParent(int a, int b) {
    a = getParent(a);
    b = getParent(b);
    
    if(a < b) {
        parent[b] = a;
    } else {
        parent[a] = b;
    }
}

bool findParent(int a, int b) {
    a = getParent(a);
    b = getParent(b);
    return a == b;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    
    vector<node> planet;
    vector<pair<int, int> > px;
    vector<pair<int, int> > py;
    vector<pair<int, int> > pz;
    
    
    int n; cin >> n;
    
    for(int i = 0; i < n; i++) {
        parent[i] = i;
        int x, y, z;
        cin >> x >> y >> z;
        
        px.push_back({x, i});
        py.push_back({y, i});
        pz.push_back({z, i});
    }
    
    sort(all(px));
    sort(all(py));
    sort(all(pz));
    
    for(int i = 0; i < n-1; i++) {
        planet.push_back(node(abs(px[i+1].first - px[i].first), px[i].second, px[i+1].second));
        planet.push_back(node((py[i+1].first - py[i].first), py[i].second, py[i+1].second));
        planet.push_back(node(abs(pz[i+1].first - pz[i].first), pz[i].second, pz[i+1].second));        
    }
    
    sort(all(planet));
    
    long long int sum = 0;
    for(auto n1 : planet) {
        if(findParent(n1.u, n1.v) == 0) {
            
            unionParent(n1.u, n1.v);
            sum += n1.d;
        }
    }
    
    cout << sum;
}
