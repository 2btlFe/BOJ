/*
boj1654 Cut the LAN cable
Algorithm: Parametric_Search
TimeComplexity: O(Klog(N)));
Explaination:

최적화 문제 결정 문제로 바꾸어 풀기
parametric_search의 기본이 되는 생각이다.

양쪽 끝 l과 r 에서 
조건을 만족하는 mid를 찾아주면 된다
*/

#include<bits/stdc++.h>
using namespace std;
#define len(x) (int) (x).size()
#define all(x) x.begin(), (x).end()
#define endl "\n"
using ll = long long;
using pii = pair<int,int>;
using pll = pair<ll,ll>;
using vi = vector<int>;
using vl = vector<ll>;
template <typename T>
using max_heap = priority_queue<T>;
template <typename T>
using min_heap = priority_queue<T, vector<T>, greater<T>>;
#define fi first
#define se second

int main()
{
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);
  std::ios_base::sync_with_stdio(false);
  
  ll K, N;
  cin >> K >> N;
  
  vector<ll> v(K);
  for(ll& x : v) cin >> x;
  
  ll l = 1;
  ll r = *max_element(all(v));
  ll ret;
  
  while(l <= r) {
      ll mid = (l + r)/2;
      
      ll sum = 0;
      for(ll i : v) sum += i/mid;
      
      if(sum >= N) {
          l = mid + 1;
          ret = mid;
      }
      else {
          r = mid - 1;
      }
  }
  
  cout << ret << endl;
}
