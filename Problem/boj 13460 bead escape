#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define ld long double
#define ar array
#define endl "\n"

//ordered_set
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

template <typename T> using oset = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef tree<pair<int, int>, null_type, less<pair<int, int> >, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
/*
    ordered_set X;
    X.insert(2);
    X.insert(3);
    X.insert(5);
    cout << *X.find_by_order(1) << '\n'; //3의 위치
    cout << X.order_of_key(5) << '\n'; //2번째 값
*/


#define vt vector
#define pb push_back
#define pi pair<int, int> >;
#define pl pair<ll, ll> >;
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()

//fo macro
#define F_OR(i, a, b, s) for (int i=(a); (s)>0?i<(b):i>(b); i+=(s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1)
#define fo(...) F_ORC(__VA_ARGS__)(__VA_ARGS__)
#define EACH(x, a) for (auto& x: a)

ll FIRSTTRUE(function<bool(ll)> f, ll lb, ll rb) {
	while(lb<rb) {
		ll mb=(lb+rb)/2;
		f(mb)?rb=mb:lb=mb+1; 
	} 
	return lb;
}
ll LASTTRUE(function<bool(ll)> f, ll lb, ll rb) {
	while(lb<rb) {
		ll mb=(lb+rb+1)/2;
		f(mb)?lb=mb:rb=mb-1; 
	} 
	return lb;
}


/*read*/
template<class A> void read(vt<A>& v);
template<class A, size_t S> void read(ar<A, S>& a);
template<class T> void read(T& x) {
	cin >> x;
}
void read(double& d) {
	string t;
	read(t);
	d=stod(t);
}
void read(long double& d) {
	string t;
	read(t);
	d=stold(t);
}
template<class H, class... T> void read(H& h, T&... t) {
	read(h);
	read(t...);
}
template<class A> void read(vt<A>& x) {
	EACH(a, x)
		read(a);
}


/*to_string*/
string to_string(char c) {
	return string(1, c);
}
string to_string(bool b) {
	return b?"true":"false";
}
string to_string(const char* s) {
	return string(s);
}
string to_string(string s) {
	return s;
}
string to_string(vt<bool> v) {
	string res;
	fo(sz(v))
		res+=char('0'+v[i]);
	return res;
}

template<size_t S> string to_string(bitset<S> b) {
	string res;
	fo(S)
		res+=char('0'+b[i]);
	return res;
}
template<class T> string to_string(T v) {
    bool f=1;
    string res;
    EACH(x, v) {
		if(!f)
			res+=' ';
		f=0;
		res+=to_string(x);
	}
    return res;
}

/*write*/
template<class A> void write(A x) {
	cout << to_string(x);
}
template<class H, class... T> void write(const H& h, const T&... t) { 
	write(h);
	write(t...);
}
void print() {
	write("\n");
}
template<class H, class... T> void print(const H& h, const T&... t) { 
	write(h);
	if(sizeof...(t))
		write(' ');
	print(t...);
}

//dbg -> 미완성 
void DBG() {
	cout << "]" << endl;
}
template<class H, class... T> void DBG(H h, T... t) {
	cout << to_string(h);
	if(sizeof...(t))
		cout << ", ";
	DBG(t...);
}
#ifdef _DEBUG
#define dbg(...) cout << "LINE(" << __LINE__ << ") -> [" << #__VA_ARGS__ << "]: [", DBG(__VA_ARGS__)
#else
#define dbg(...) 0
#endif


//offset
template<class T> void offset(ll o, T& x) {
	x+=o;
}
template<class T> void offset(ll o, vt<T>& x) {
	EACH(a, x)
		offset(o, a);
}
template<class T, size_t S> void offset(ll o, ar<T, S>& x) {
	EACH(a, x)
		offset(o, a);
}

//random
mt19937 mt_rng(chrono::steady_clock::now().time_since_epoch().count());
ll randint(ll a, ll b) {
	return uniform_int_distribution<ll>(a, b)(mt_rng);
}

//vti
template<class T, class U> void vti(vt<T> &v, U x, size_t n) {
	v=vt<T>(n, x);
}
template<class T, class U> void vti(vt<T> &v, U x, size_t n, size_t m...) {
	v=vt<T>(n);
	EACH(a, v)
		vti(a, x, m);
}

//orient
const int d4[4][2] = {{0, -1}, {0, 1}, {1, 0}, {-1, 0}};
const int d8[8][2] = {{0, -1}, {0, 1}, {1, 0}, {-1, 0}, {-1, -1}, {-1, 1}, {1, -1}, {1, 1}};

const int Left = 0, Right = 1, Down = 2, Up = 3;
const int INF = 1e9;
const int blue = 0, red = 1, row = 0, col = 1; 

int cache[100][100];

char board[10][10];
int o;
int n, m;
int dp(int b, int r) {
    //base case
    if(b == r) return INF;
    else if(r == o) return 0;
    
    //memoization
    int& ret = cache[b][r];
    if(ret != -1) return ret;
    
    //recursion
    ret = INF;
    int ball[2][2];
    ball[blue][row] = b/10;
    ball[blue][col] = b%10;
    ball[red][row] = r/10;
    ball[red][col] = r%10;
    
    fo(orient, 4) {
        //base case
        vector<int> whichball = {blue, red};
        
        if(orient == Left && ball[blue][row] == ball[red][row]) {
            if(ball[blue][col] > ball[red][col]) swap(whichball[blue], whichball[red]); 
        } 
        else if(orient == Right && ball[blue][row] == ball[red][row]) {
            if(ball[blue][col] < ball[red][col]) swap(whichball[blue], whichball[red]); 
        } 
        else if(orient == Down && ball[blue][col] == ball[red][col]) {
            if(ball[blue][row] < ball[red][row]) swap(whichball[blue], whichball[red]); 
        } 
        else if(orient == Up && ball[blue][col] == ball[red][col]) {
            if(ball[blue][row] > ball[red][row]) swap(whichball[blue], whichball[red]); 
        } 
        
        int nb, nr;
        for(int color : whichball) {
            int y = ball[color][row], x = ball[color][col];
            int ny, nx;
            
            while(1) {
                int ny = y + d4[orient][row];
                int nx = x + d4[orient][col];
                
                //base case
                if(ny < 0 || ny >= n || nx < 0 || nx >= m) break;
                if(board[ny][nx] == '#') break;
                if(board[ny][nx] == 'O') {
                    y = ny; 
                    x = nx;
                    break;
                }
                if(board[ny][nx] == 'R' || board[ny][nx] == 'B') break;
                
                //이동 가능한 점이므로 이동
                board[ny][nx] = (color == blue) ? 'B' : 'R';
                board[y][x] = '.';
                y = ny; x = nx;
            }
                
            if(color == blue) nb = 10*y + x;
            else nr = 10*y + x;    
        }
        
        if(nb == b && nr == r) ret = min(ret, INF);
        else ret = min(ret, dp(nb, nr) + 1);
    }
    return ret;
}

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
    memset(cache, -1, sizeof(cache));
    
    int b, r;
    read(n, m);
    fo(i, n) {
        string s; read(s);
        fo(j, m) {
            board[i][j] = s[j];
            if(board[i][j] == 'B') {
                b = 10*i + j; 
            } else if(board[i][j] == 'R') {
                r = 10*i + j;
            } else if(board[i][j] == 'O') {
                o = 10*i + j;
            }
        }
    }

    if(dp(b,r) > 10) {
        print(-1);
    } else {
        print(dp(b, r));
    }

}
